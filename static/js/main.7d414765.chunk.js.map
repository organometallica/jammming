{"version":3,"sources":["util/Spotify.js","util/constants.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackURIs","length","userID","playlistID","method","body","JSON","stringify","uris","SearchBar","props","bind","handleTermChange","e","this","setState","target","value","onSearch","state","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","onRemove","renderAction","TrackList","key","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","App","updatePlaylistName","find","savedTrack","filter","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d414765.chunk.js","sourcesContent":["import { clientID, redirectURI } from './constants';\nlet accessToken;\nconst url = 'https://api.spotify.com/v1/search?type=track&q=';\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessUrl;\n    }\n  },\n\n    search(term) {\n      const accessToken = Spotify.getAccessToken();\n\n      return fetch(`${url}${term}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      }).then(response => {\n        return response.json();\n      }).then(jsonResponse => {\n\n        console.log(jsonResponse.tracks)\n\n        if (jsonResponse.tracks) {\n\n          console.log(jsonResponse.tracks.items)\n\n          return jsonResponse.tracks.items.map(track => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          }));\n        }\n      });\n    },\n\n    savePlaylist(playlistName, trackURIs) {\n      console.log('Starting save playlist procedure')\n      const accessToken = Spotify.getAccessToken();\n      if (playlistName && trackURIs.length) {\n        //there are values in both playlistName and trackURIs\n\n        let userID = '';\n        let playlistID = ''\n        // const accessToken = Spotify.getAccessToken();\n        const headers = {\n          Authorization: `Bearer ${accessToken}`\n        };\n\n        // 1. Get their user id\n        return fetch('https://api.spotify.com/v1/me', {\n          headers: headers\n        }).then(response => response.json()).then(jsonResponse => {\n            userID = jsonResponse.id;\n\n            // 2. Create a playlist and get its ID\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n              headers: headers,\n              method: 'POST',\n              body: JSON.stringify({name: playlistName})\n            }).then(response => response.json()).then(jsonResponse => {\n                playlistID = jsonResponse.id;\n                // 3. Post the track URIs to the playlist, get out\n                return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\n                  headers: headers,\n                  method: 'POST',\n                  body: JSON.stringify({uris: trackURIs})\n                })\n              })\n            })\n\n\n        } else {\n          console.log('the variables are empty, gtfo')\n          return\n        }\n      }\n    }\n\n    export default Spotify;\n","export const clientID = 'adc761300ff74f77977a1682e798fd88';\nexport const redirectURI = 'http://localhost:3000';\n","import React from 'react';\nimport './SearchBar.css';\nimport Spotify from '../../util/Spotify';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  handleTermChange(e) {\n    this.setState({\n      term: e.target.value\n    })\n  }\n\n  search() {\n    // console.log('searching within searchBar.js')\n    this.props.onSearch(this.state.term);\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return (\n        <button className='Track-action' onClick={this.removeTrack}>-</button>\n      )\n    } else {\n      return (\n        <button className='Track-action' onClick={this.addTrack}>+</button>\n      )\n    }\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction()}\n      </div>\n    )\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n  render() {\n    // console.log(this.props.tracks)\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => <Track key={track.id} track={track} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />)\n        }\n      </div>\n    )\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\n      </div>\n    )\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  handleNameChange(e) {\n    this.props.onNameChange(e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    )\n  }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchResults: [],\n      playlistName: '',\n      playlistTracks: []\n    };\n\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      console.log('track already in list')\n      return;\n    } else {\n      this.setState({\n        playlistTracks: [...this.state.playlistTracks, track],\n      }, () => {\n        console.log(this.state.playlistTracks);\n      });\n\n    }\n  }\n\n  removeTrack(track) {\n    this.setState({\n      playlistTracks: this.state.playlistTracks.filter(savedTrack => savedTrack.id !== track.id)\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist() {\n    console.log(this.state.playlistTracks)\n    let trackURIs = this.state.playlistTracks.map(track => track.uri)\n    console.log(trackURIs)\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(tracks => {\n      this.setState({\n        searchResults: tracks\n      })\n    })\n  }\n\n  componentDidMount() {\n    Spotify.getAccessToken();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}